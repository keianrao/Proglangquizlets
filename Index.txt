Problem 1
---
Given a list of 2D points, of integer coordinates,
(1) Sort them by X;

(2) For any (integer) X with no point covering it, make one up using linear interpolation on the existing points. (As in, the nearest existing point to its left and right, draw a straight line between them and use that line to plot points over the uncovered Xes).

(3) Find and record the third-smallest Y value amongst the new list of points.

(4) Assemble the new list of points into a (sorted) binary tree with the points' Y's as values.

(5) Binary search for the recorded third-smallest Y value, recording the values of the nodes you visited along the way (including the root).

This is some really cheesy algorithms problems, but let's see if you can survive what is basically five separate ones in a row.

Implementation language: JavaScript

%%

Problem 2
---
(1) Store hierarchical data in the form of nested dictionaries. For example, for every mapping in a given dictionary, might be an atomic value, or another dictionary.

(2) Print every atomic value in the dictionary to standard output, as its own line of the form 'K = V' - where K is the (corresponding) key's name, preceded by the key names of the nested dictionaries it is in, separated by periods.

This is better explained with an example. Suppose a top-level dictionary has two mappings: 'first' to '5'; and 'second' to another dictionary, which contains one mapping 'a' to 'A'.

    {
        first: 5
        second: {
            a: A
        }
    }

Then, to print this dictionary as per the question.

    first = 5
    second.a = A

There was no entry for 'second' as a key since it didn't map to an atomic value, but the atomic value inside it was printed prefixed by 'second.', since 'second' is the key name of a nested dictionary it was in, so we wrote that and a separating period. Here are some more examples:

    third = 10
    fourth.first = 10
    fourth.second.first = 10

    value = 2
    left.value = 1
    right.value = 3

    fruits.tropical.green = durian

Hopefully this terrible, long-winded explanation gives the idea.

Anyhow. So, nested dictionary. Print each atomic value as a 'K = V' line, where if it's nested then prefix the K appropriately.


(3) Repeat (1), but this time in the form of some sort of object with a custom type/class.

(4) Print the object in (3), overriding its string representation such that it matches what (2) does.

For this step to make sense, the print function you are using needs to somehow let you provide the string representation for the object. For example, in OO languages, usually the print function calls some public method of the object that you can override.

Implementation language: Python

%%

Problem 3
---

(1) Write a shell script matching the following:

It will prepare up to 4 columns; for each column, it accepts a column name and column width, through environment variables. If no values are passed, then the script by default should use 2 columns of some generic column names and appropriate width (e.g. 'Course', 'Grade').

The script is going to have output, based on the column widths - like a report generator. Consider column H length 8, column J length 16, and column K length 1:

    H       J               K
    |---|---|---|---|---|---|
    0       8       16      24

(ruler not actually in output, we're just highlighting the locations and widths) The first line of output are column names. They'll be left-justified according to their column. Consider for 'Brand', 'Tea in stock' and 'Rating':

    Brand   Tea in stock    Rating

So, the first line of output are column names like so. Then the script will start accepting DSV data from standard input - the colon ':' will be the field separator. For each DSV line, the corresponding fields are matched to the columns, left-justified like the column names. Consider for 'Occupation', 'Age':

    Occupation          Age
    Student             15
    Student             16
    Professor           41
    Student             20
    Accountant          26
    Farmer              33

which comes from data 'Student:15\nStudent:16\nProfessor:41\nStudent:20\nccountant:26\nFarmer:33\n'.

Moreover. There will actually be an automatic first column (call it the 0th column if you'd like), of length.. 4. Containing the line number for each line.

    #   Occupation          Age
    1   Student             15
    2   Student             16
    ...
    20  Printer salesperson 25

Regarding the column widths. If the column name / field value are too long to fit in the column, they should be clipped such that there is a double-period '..' at the end.


(2) Write a program that spawns an invocation of this script, with a custom environment (i.e. values passed in through environment variables), then feeds some sample data into it.

Next, the program will read the script's output, adding some ANSI escape codes before forwarding to standard output again: first, every column name will be underlined (note: not the whitespace!); second, the line numbers will be coloured differently, probably gray (note: not the column values!).



The script and the program do not have to be very robust, but they should not brick over easily encountered situations (e.g. no values given for environment variables, no lines of input). The idea here is to use APIs to do a bit of text processing.


Implementation language: sh; Node.js

%%

Problem 4
---

(1) To start with, measure and print the runtime of some arbitrary trivial functionality.

(2) Create some simple key-value pairs for test data. Store them (in a variable, etc.).

(3) Create a hash dictionary and an associative array/list. (If your standard library lacks a hash dictionary, create one based on a growing array/list, and use a basic hash function specialised for the test keys.)

(4) Progressively, remove a pair from the test data and add it into both data structures. Then look it up again in both of them, measuring and printing the runtime for each.

(5) Stop when the associative array is slower than the hash map, and print the number of pairs added so far.

Implementation language: Python
